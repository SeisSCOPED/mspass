<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_core_time_series_8cc" kind="file" language="C++">
    <compoundname>CoreTimeSeries.cc</compoundname>
    <includes local="no">vector</includes>
    <includes local="yes">misc/blas.h</includes>
    <includes refid="_ms_p_a_s_s_error_8h" local="yes">mspass/utility/MsPASSError.h</includes>
    <includes refid="_core_time_series_8h" local="yes">mspass/seismic/CoreTimeSeries.h</includes>
    <includes refid="_metadata_8h" local="yes">mspass/utility/Metadata.h</includes>
    <incdepgraph>
      <node id="1230">
        <label>list</label>
      </node>
      <node id="1222">
        <label>mspass/seismic/BasicTimeSeries.h</label>
        <link refid="_basic_time_series_8h_source"/>
        <childnode refid="1223" relation="include">
        </childnode>
        <childnode refid="1224" relation="include">
        </childnode>
        <childnode refid="1225" relation="include">
        </childnode>
      </node>
      <node id="1224">
        <label>boost/archive/text_iarchive.hpp</label>
      </node>
      <node id="1218">
        <label>mspass/utility/MsPASSError.h</label>
        <link refid="_ms_p_a_s_s_error_8h_source"/>
        <childnode refid="1219" relation="include">
        </childnode>
        <childnode refid="1220" relation="include">
        </childnode>
      </node>
      <node id="1236">
        <label>string</label>
      </node>
      <node id="1221">
        <label>mspass/seismic/CoreTimeSeries.h</label>
        <link refid="_core_time_series_8h_source"/>
        <childnode refid="1216" relation="include">
        </childnode>
        <childnode refid="1222" relation="include">
        </childnode>
        <childnode refid="1226" relation="include">
        </childnode>
      </node>
      <node id="1228">
        <label>map</label>
      </node>
      <node id="1220">
        <label>exception</label>
      </node>
      <node id="1231">
        <label>fstream</label>
      </node>
      <node id="1233">
        <label>boost/any.hpp</label>
      </node>
      <node id="1225">
        <label>boost/archive/text_oarchive.hpp</label>
      </node>
      <node id="1235">
        <label>mspass/utility/BasicMetadata.h</label>
        <link refid="_basic_metadata_8h_source"/>
        <childnode refid="1236" relation="include">
        </childnode>
      </node>
      <node id="1227">
        <label>typeinfo</label>
      </node>
      <node id="1216">
        <label>vector</label>
      </node>
      <node id="1215">
        <label>/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc</label>
        <link refid="_core_time_series_8cc"/>
        <childnode refid="1216" relation="include">
        </childnode>
        <childnode refid="1217" relation="include">
        </childnode>
        <childnode refid="1218" relation="include">
        </childnode>
        <childnode refid="1221" relation="include">
        </childnode>
        <childnode refid="1226" relation="include">
        </childnode>
      </node>
      <node id="1232">
        <label>sstream</label>
      </node>
      <node id="1234">
        <label>pybind11/pybind11.h</label>
      </node>
      <node id="1223">
        <label>math.h</label>
      </node>
      <node id="1219">
        <label>iostream</label>
      </node>
      <node id="1229">
        <label>set</label>
      </node>
      <node id="1217">
        <label>misc/blas.h</label>
      </node>
      <node id="1226">
        <label>mspass/utility/Metadata.h</label>
        <link refid="_metadata_8h_source"/>
        <childnode refid="1227" relation="include">
        </childnode>
        <childnode refid="1228" relation="include">
        </childnode>
        <childnode refid="1229" relation="include">
        </childnode>
        <childnode refid="1230" relation="include">
        </childnode>
        <childnode refid="1219" relation="include">
        </childnode>
        <childnode refid="1231" relation="include">
        </childnode>
        <childnode refid="1232" relation="include">
        </childnode>
        <childnode refid="1233" relation="include">
        </childnode>
        <childnode refid="1234" relation="include">
        </childnode>
        <childnode refid="1218" relation="include">
        </childnode>
        <childnode refid="1235" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemspass_1_1seismic">mspass::seismic</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;misc/blas.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mspass/utility/MsPASSError.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mspass/seismic/CoreTimeSeries.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mspass/utility/Metadata.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemspass_1_1seismic" kindref="compound">mspass::seismic</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemspass_1_1utility" kindref="compound">mspass::utility</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>simple<sp/>constructors<sp/>for<sp/>the<sp/>CoreTimeSeries<sp/>object<sp/>are<sp/>defined<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>seispp.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="classmspass_1_1seismic_1_1_core_time_series_1a48794c92ef727de958653b7d395f6b5d" kindref="member">CoreTimeSeries::CoreTimeSeries</ref>()<sp/>:<sp/>BasicTimeSeries(),<sp/><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>()</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>s.reserve(0);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_dt(1.0);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_t0(0.0);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_npts(0);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal">CoreTimeSeries::CoreTimeSeries(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsin)<sp/>:<sp/>BasicTimeSeries(),<sp/><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>()</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>IMPORTANT:<sp/><sp/>this<sp/>constructor<sp/>assumes<sp/>BasicTimeSeries<sp/>initializes<sp/>the</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>equivalent<sp/>of:</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>set_dt(1.0)</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>set_t0(0.0)</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>set_tref(TimeReferenceType::Relative)</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>this-&gt;kill()<sp/>-<sp/>i.e.<sp/>marked<sp/>dead</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/>It<sp/>further<sp/>assumes<sp/>current<sp/>api<sp/>where<sp/>set_npts<sp/>allocates<sp/>and<sp/>initializes<sp/>s</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/>to<sp/>nsin<sp/>zeros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>this-&gt;CoreTimeSeries::set_npts(nsin);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">CoreTimeSeries::CoreTimeSeries(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CoreTimeSeries&amp;<sp/>tsi)<sp/>:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>BasicTimeSeries(tsi),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>(tsi)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mlive)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=tsi.s;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tsi.s.size()&gt;0)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>needed<sp/>to<sp/>preserve<sp/>the<sp/>contents<sp/>of<sp/>data<sp/>vector<sp/>when<sp/>something</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>marks<sp/>the<sp/>data<sp/>dead,<sp/>but<sp/>one<sp/>wants<sp/>to<sp/>restore<sp/>it<sp/>later.<sp/><sp/>Classic<sp/>example</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>an<sp/>interactive<sp/>trace<sp/>editor.<sp/><sp/>Found<sp/>mysterious<sp/>errors<sp/>can<sp/>occur</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>without<sp/>this<sp/>features.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=tsi.s;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>nothing<sp/>if<sp/>the<sp/>parent<sp/>s<sp/>is<sp/>empty<sp/>as<sp/>std::vector<sp/>will<sp/>be<sp/>properly</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>initialized*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">CoreTimeSeries::CoreTimeSeries(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BasicTimeSeries&amp;<sp/>bd,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>&amp;<sp/>md)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>BasicTimeSeries(bd),<sp/><ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">Metadata</ref>(md)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>assumes<sp/>set_npts<sp/>initializes<sp/>the<sp/>vector<sp/>containers,<sp/>s,<sp/>to<sp/>zeros</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>AND<sp/>that<sp/>BasicTimeSeries<sp/>constructor<sp/>initializes<sp/>ns<sp/>(npts)<sp/>to<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>desired.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>this-&gt;CoreTimeSeries::set_npts(this-&gt;nsamp);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standard<sp/>assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">CoreTimeSeries&amp;<sp/>CoreTimeSeries::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CoreTimeSeries&amp;<sp/>tsi)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">!=&amp;tsi)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;BasicTimeSeries::operator=(tsi);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classmspass_1_1utility_1_1_metadata_1aadbae283dfdb87a82832519a9955fdfa" kindref="member">Metadata::operator=</ref>(tsi);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=tsi.s;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Sum<sp/>operator<sp/>for<sp/>CoreTimeSeries<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">CoreTimeSeries&amp;<sp/>CoreTimeSeries::operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CoreTimeSeries&amp;<sp/>data)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,i0,iend;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j,j0=0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sun&apos;s<sp/>compiler<sp/>complains<sp/>about<sp/>const<sp/>objects<sp/>without<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>CoreTimeSeries&amp;<sp/>d=</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">CoreTimeSeries&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Silently<sp/>do<sp/>nothing<sp/>if<sp/>d<sp/>is<sp/>marked<sp/>dead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!d.mlive)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Silently<sp/>do<sp/>nothing<sp/>if<sp/>d<sp/>does<sp/>not<sp/>overlap<sp/>with<sp/>data<sp/>to<sp/>contain<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(d.endtime()&lt;mt0)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(d.mt0&gt;(this-&gt;endtime()))<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(d.tref!=(this-&gt;tref))</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref>(</highlight><highlight class="stringliteral">&quot;CoreTimeSeries<sp/>+=<sp/>operator<sp/>cannot<sp/>handle<sp/>data<sp/>with<sp/>inconsistent<sp/>time<sp/>base\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Invalid);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>we<sp/>have<sp/>to<sp/>determine<sp/>range<sp/>fo<sp/>sum<sp/>for<sp/>d<sp/>into<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>i0=d.sample_number(this-&gt;mt0);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i0&lt;0)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j=-i0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i0=0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>iend=d.sample_number(this-&gt;endtime());</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iend&gt;(d.s.size()-1))</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iend=d.s.size()-1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IMPORTANT:<sp/><sp/>This<sp/>algorithm<sp/>simply<sp/>assumes<sp/>zero_gaps<sp/>has<sp/>been<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and/or<sp/>d<sp/>was<sp/>checked<sp/>for<sp/>gaps<sp/>befor<sp/>calling<sp/>this<sp/>operatr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>will<sp/>produce<sp/>garbage<sp/>for<sp/>most<sp/>raw<sp/>gap<sp/>(sample<sp/>level)<sp/>marking<sp/>schemes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=i0,j=j0;<sp/>i&lt;=iend;<sp/>++i,++j)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;s[j]+=d.s[i];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal">CoreTimeSeries&amp;<sp/>CoreTimeSeries::operator*=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>dscal(this-&gt;npts(),scale,&amp;(this-&gt;s[0]),1);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CoreTimeSeries::set_dt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sample_interval)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>this-&gt;BasicTimeSeries::set_dt(sample_interval);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>unique<sp/>name<sp/>-<sp/>we<sp/>always<sp/>set<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>this-&gt;put(</highlight><highlight class="stringliteral">&quot;delta&quot;</highlight><highlight class="normal">,sample_interval);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>these<sp/>are<sp/>hard<sp/>coded<sp/>aliases<sp/>for<sp/>sample_interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>std::set&lt;string&gt;<sp/>aliases;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>std::set&lt;string&gt;::iterator<sp/>aptr;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>aliases.insert(</highlight><highlight class="stringliteral">&quot;dt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(aptr=aliases.begin();aptr!=aliases.end();++aptr)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;is_defined(*aptr))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;put(*aptr,sample_interval);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CoreTimeSeries::set_t0(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0in)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>this-&gt;BasicTimeSeries::set_t0(t0in);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>unique<sp/>name<sp/>-<sp/>we<sp/>always<sp/>set<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>this-&gt;put(</highlight><highlight class="stringliteral">&quot;starttime&quot;</highlight><highlight class="normal">,t0in);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>these<sp/>are<sp/>hard<sp/>coded<sp/>aliases<sp/>for<sp/>sample_interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>std::set&lt;string&gt;<sp/>aliases;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>std::set&lt;string&gt;::iterator<sp/>aptr;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>aliases.insert(</highlight><highlight class="stringliteral">&quot;t0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>aliases.insert(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(aptr=aliases.begin();aptr!=aliases.end();++aptr)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;is_defined(*aptr))</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;put(*aptr,t0in);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CoreTimeSeries::set_npts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>npts)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>this-&gt;BasicTimeSeries::set_npts(npts);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>unique<sp/>name<sp/>-<sp/>we<sp/>always<sp/>set<sp/>it.<sp/>Cast<sp/>is<sp/>necessary<sp/>to</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/>avoid<sp/>type<sp/>mismatch<sp/>in<sp/>python<sp/>for<sp/>unsigned*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>this-&gt;put(</highlight><highlight class="stringliteral">&quot;npts&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)npts);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>these<sp/>are<sp/>hard<sp/>coded<sp/>aliases<sp/>for<sp/>sample_interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>std::set&lt;string&gt;<sp/>aliases;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>std::set&lt;string&gt;::iterator<sp/>aptr;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>aliases.insert(</highlight><highlight class="stringliteral">&quot;nsamp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>aliases.insert(</highlight><highlight class="stringliteral">&quot;wfdisc.nsamp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(aptr=aliases.begin();aptr!=aliases.end();++aptr)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;is_defined(*aptr))</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;put(*aptr,(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)npts);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>method<sp/>has<sp/>the<sp/>further<sp/>complication<sp/>that<sp/>npts<sp/>sets<sp/>the<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/>data<sp/>buffer.<sp/><sp/>We<sp/>clear<sp/>it<sp/>an<sp/>initialize<sp/>it<sp/>to<sp/>0<sp/>to<sp/>be<sp/>consistent<sp/>with</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/>how<sp/>constructors<sp/>handle<sp/>this.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>this-&gt;s.clear();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>this-&gt;s.reserve(npts);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;i&lt;npts;++i)this-&gt;s.push_back(0.0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CoreTimeSeries::sync_npts()</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nsamp<sp/>!=<sp/>this-&gt;s.size())<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;BasicTimeSeries::set_npts(this-&gt;s.size());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>unique<sp/>name<sp/>-<sp/>we<sp/>always<sp/>set<sp/>it.<sp/><sp/>The<sp/>weird</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>cast<sp/>is<sp/>necessary<sp/>to<sp/>avoid<sp/>type<sp/>mismatch<sp/>with<sp/>unsigned*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;put(</highlight><highlight class="stringliteral">&quot;npts&quot;</highlight><highlight class="normal">,(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nsamp);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>these<sp/>are<sp/>hard<sp/>coded<sp/>aliases<sp/>for<sp/>sample_interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;string&gt;<sp/>aliases;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;string&gt;::iterator<sp/>aptr;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>aliases.insert(</highlight><highlight class="stringliteral">&quot;nsamp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>aliases.insert(</highlight><highlight class="stringliteral">&quot;wfdisc.nsamp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(aptr=aliases.begin();aptr!=aliases.end();++aptr)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;is_defined(*aptr))</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;put(*aptr,(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nsamp);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CoreTimeSeries::operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="202"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!mlive)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;CoreTimeSeries<sp/>operator[]:<sp/>attempting<sp/>to<sp/>access<sp/>data<sp/>marked<sp/>as<sp/>dead&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Invalid);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(i&lt;0)<sp/>||<sp/>(i&gt;=s.size())<sp/>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_ms_p_a_s_s_error" kindref="compound">MsPASSError</ref>(</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;CoreTimeSeries<sp/>operator[]:<sp/><sp/>request<sp/>for<sp/>sample<sp/>outside<sp/>range<sp/>of<sp/>data&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorSeverity::Invalid);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(s[i]);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>MsPASS<sp/>namespace<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/mspass/mspass/cxx/src/lib/seismic/CoreTimeSeries.cc"/>
  </compounddef>
</doxygen>
