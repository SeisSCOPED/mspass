<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_metadata_definitions_8h" kind="file" language="C++">
    <compoundname>MetadataDefinitions.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">tuple</includes>
    <includedby refid="_metadata_definitions_8cc" local="yes">/home/runner/work/mspass/mspass/cxx/src/lib/utility/MetadataDefinitions.cc</includedby>
    <incdepgraph>
      <node id="758">
        <label>map</label>
      </node>
      <node id="759">
        <label>tuple</label>
      </node>
      <node id="757">
        <label>/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h</label>
        <link refid="_metadata_definitions_8h"/>
        <childnode refid="758" relation="include">
        </childnode>
        <childnode refid="759" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classmspass_1_1utility_1_1_metadata_definitions" prot="public">mspass::utility::MetadataDefinitions</innerclass>
    <innernamespace refid="namespacemspass">mspass</innernamespace>
    <innernamespace refid="namespacemspass_1_1utility">mspass::utility</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_METADATADEFINITIONS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_METADATADEFINITIONS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemspass" kindref="compound">mspass</ref>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utility{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>MDDefFormat</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>PF,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>YAML</highlight></codeline>
<codeline lineno="11"><highlight class="normal">};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classmspass_1_1utility_1_1_metadata_definitions" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>mdname);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>mdname,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mspass::utility::MDDefFormat<sp/>form);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref>&amp;<sp/>parent);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_defined(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>std::string<sp/>concept(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>mspass::utility::MDtype<sp/>type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>std::list&lt;std::string&gt;<sp/>keys()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>concept_,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MDtype<sp/>mdt);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_alias(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_alias(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::list&lt;std::string&gt;<sp/>aliases(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>std::pair&lt;std::string,mspass::utility::MDtype&gt;<sp/>unique_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>aliasname)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_alias(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>aliasname);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readonly(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_readonly(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_writeable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_normalized(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>std::string<sp/>unique_id_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>std::string<sp/>collection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>std::pair&lt;std::string,std::string&gt;<sp/>normalize_data(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>key)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">std::list&lt;std::string&gt;<sp/>apply_aliases(<ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">mspass::utility::Metadata</ref>&amp;<sp/>d,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;std::string&gt;<sp/>aliaslist);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_aliases(<ref refid="classmspass_1_1utility_1_1_metadata" kindref="compound">mspass::utility::Metadata</ref>&amp;<sp/>d);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref>&amp;<sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmspass_1_1utility_1_1_metadata_definitions" kindref="compound">MetadataDefinitions</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,MDtype&gt;<sp/>tmap;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,std::string&gt;<sp/>cmap;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>std::multimap&lt;std::string,std::string&gt;<sp/>aliasmap;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,std::string&gt;<sp/>alias_xref;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>std::set&lt;std::string&gt;<sp/>roset;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>map<sp/>is<sp/>used<sp/>to<sp/>handle<sp/>normalized<sp/>data<sp/>in<sp/>any<sp/>database.<sp/><sp/><sp/>For<sp/>the</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/>initial<sp/>design<sp/>the<sp/>data<sp/>could<sp/>be<sp/>a<sp/>pair,<sp/>but<sp/>I<sp/>make<sp/>it<sp/>a<sp/>tuple<sp/>because<sp/>I</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/>can<sp/>conveive<sp/>extensions<sp/>that<sp/>would<sp/>require<sp/>additional<sp/>information<sp/>to<sp/>provides</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/>a<sp/>unique<sp/>index<sp/>definition.<sp/><sp/><sp/>e.g.<sp/><sp/>the<sp/>antelope<sp/>indexing<sp/>of<sp/>sta,chan,time:endtime.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,std::tuple&lt;std::string,std::string&gt;&gt;<sp/>unique_id_data;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pfreader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>pfname);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>yaml_reader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>fname);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">};</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>utility<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>mspass<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/mspass/mspass/cxx/include/mspass/utility/MetadataDefinitions.h"/>
  </compounddef>
</doxygen>
